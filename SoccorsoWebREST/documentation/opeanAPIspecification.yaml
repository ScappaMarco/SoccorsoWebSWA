openapi: 3.0.4
info:
  title: SoccorsoWeb Rest API
  version: "0.1"
externalDocs:
  url: https://github.com/ScappaMarco/SoccorsoWebSWA.git
  description: GitHub repository for the project
servers:
  - url: http://localhost:8080/soccorsoweb/rest
tags:
  - name: Authentication
    description: Authentication operations
  - name: Requests
    description: Requests operations
  - name: Operators
    description: Operators operation
paths:
  /auth/login:
    post:
      operationId: login
      description: login
      tags:
        - Authentication
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              type: string
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "500":
          $ref: "#/components/responses/GeneralError"
  /auth/logout:
    delete:
      operationId: logout
      description: logout
      tags:
        - Authentication
      security:
        - bearerAuth: []
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "500":
          $ref: "#/components/responses/GeneralError"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
  /requests:
    post:
      operationId: addRequest
      description: The operations "POST" on the endpoint "/requests" has the effetc of adding a new request. Is then returned the location of the just added request.
      tags:
        - Requests
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/helpRequest"
            examples:
              example:
                $ref: "#/components/examples/helpRequest"
      responses:
        "201":
          description: Request added
          headers:
            Location:
              description: URL of the just added request
              schema:
                type: string
                format: uri
                example: requests/334
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/GeneralError"
  /requests/{requestId}:
    get:
      operationId: getRequest
      description: The operation "GET" on the endpoint "/requests/{id}" has the effetc of getting the request with the specified ID
      tags:
        - Requests
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/requestId"
      responses:
        "200":
          description: Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/helpRequest"
              examples:
                example:
                  $ref: "#/components/examples/helpRequest"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/GeneralError"
    delete:
      operationId: deleteRequest
      description: The operation "DELETE" on the endpoint "/requests/{id}" has the effect of deleting the request with the specified ID
      tags:
        - Requests
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/requestId"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/GeneralError"
  /requests/{requestId}/validate:
    patch:
      operationId: validateRequest
      description: The operation "PATCH" on the endpoint "/requests/{id}/validate" has the effetc of validating the specified help request (the status of the specified hel request is set to "active")
      tags:
        - Requests
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/requestId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/requestStatus"
            examples:
              example:
                summary: Status setted on "active"
                value:
                  status: attiva
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "404":
          $ref: "#/components/responses/NotFound"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/GeneralError"
  /requests/closed:
    get:
      operationId: getClosedRequestsWithLowSuccess
      description: The operation "GET" on the endpoint "request/closed/successLevel=[0,1,2,3,4]" has effect of returning alla the help requests closed and with level of success lower then 5
      tags:
        - Requests
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/successLevel"
      responses:
        "200":
          description: List of the help request ended and with a level of success lower then 5
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/helpRequest"
              examples:
                example:
                  $ref: "#/components/examples/helpRequestArray"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/GeneralError"
  /operators/{operatorStatus}:
    get:
      operationId: getOperatorPerStatus
      description: The operation "GET" on the endpoint "operators/{status}" has the effect of returning all the operators in the specified status (either "free" or "not free")
      tags:
        - Operators
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/operatorStatus"
      responses:
        "200":
          description: List of the operators in the specified status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/operator"
              examples:
                example:
                  $ref: "#/components/examples/operatorsArray"
        "401":
          $ref: "#/components/responses/UnauthorizedError"
        "500":
          $ref: "#/components/responses/GeneralError"
  /requests/{requestId}/mission:
    patch:
      
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: internalToken
  schemas:
    ID:
      type: integer
      minimum: 1
    email:
      type: string
      format: email
    date-time:
      type: string
      format: date-time
    successLevel:
      type: integer
      minimum: 0
      maximum: 5
    operatorStatus:
      type: string
      enum:
        - "free"
        - "not_free"
    requestStatus:
      type: string
      enum:
        - "in_attesa"
        - "attiva"
        - "in_corso"
        - "chiusa"
        - "ignorata"
    adminStatus:
      type: string
      enum:
        - "active"
        - "inactive"
    position:
      type: object
      properties:
        address:
          type: string
        coordinates:
          type: string
      required:
        - address
        - coordinates
      additionalProperties: false
    user:
      type: object
      properties:
        name:
          type: string
        email:
          $ref: "#/components/schemas/email"
      required:
        - name
        - email
      additionalProperties: false
    operator:
      type: object
      properties:
        ID:
          $ref: "#/components/schemas/ID"
        name:
          type: string
        email:
          $ref: "#/components/schemas/email"
        username:
          type: string
        licenses:
          type: array
          items:
            type: string
        skills:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/operatorStatus"
      required:
        - ID
        - name
        - email
        - username
        - licenses
        - skills
        - status
      additionalProperties: false
    admin:
      type: object
      properties:
        ID:
          $ref: "#/components/schemas/ID"
        name:
          type: string
        email:
          $ref: "#/components/schemas/email"
        username:
          type: string
        skills:
          type: array
          items:
            type: string
        status:
          $ref: "#/components/schemas/adminStatus"
      required:
        - ID
        - name
        - email
        - username
        - skills
        - status
      additionalProperties: false
    mission:
      type: object
      properties:
        team:
          type: array
          items:
            $ref: "#/components/schemas/operator"
        teamLeader:
          $ref: "#/components/schemas/operator"
        objective:
          type: string
        startTime:
          $ref: "#/components/schemas/date-time"
        endTime:
          $ref: "#/components/schemas/date-time"
        successLevel:
          $ref: "#/components/schemas/successLevel"
        endingAdmin:
          $ref: "#/components/schemas/admin"
      required:
        - team
        - teamLeader
        - startTime
      additionalProperties: false
    helpRequest:
      type: object
      properties:
        ID:
          $ref: "#/components/schemas/ID"
        description:
          type: string
        position:
          $ref: "#/components/schemas/position"
        reporter:
          $ref: "#/components/schemas/user"
        status:
          $ref: "#/components/schemas/requestStatus"
        mission:
          $ref: "#/components/schemas/mission"
      required:
        - ID
        - description
        - position
        - reporter
        - status
      additionalProperties: false
  parameters:
    requestId:
      name: requestId
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ID"
    operatorId:
      name: operatorId
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/ID"
    successLevel:
      name: successLevel
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/successLevel"
    requestStatus:
      name: requestStatus
      in: query
      required: true
      schema:
        $ref: "#/components/schemas/requestStatus"
    operatorStatus:
      name: operatorStatus
      in: path
      required: true
      schema:
        $ref: "#/components/schemas/operatorStatus"
  responses:
    SuccessfullInsert:
      description: Elemen created
      headers:
        location:
          schema:
            type: string
            format: uri
      content:
        application/json:
          schema:
            type: string
            format: uri
    NoContent:
      description: No content
    GeneralError:
      description: General error
    UnauthorizedError:
      description: Missing or invalid bearer token
    NotFound:
      description: Element not found
      content:
        text/plain:
          schema:
            type: string
  examples:
    operator:
      summary: Esempio operatore
      value:
        ID: 223
        name: "paolo rossi"
        email: "paolo.rossi@ex.com"
        username: "paolorossi98"
        licenses:
          - "A"
          - "B"
          - "C1"
        skills:
          - "skill 1"
          - "skill 2"
        status: "free"
    admin:
      summary: Esempio amministratore
      value:
        ID: 87
        name: "pippo binchi"
        email: "pippo.bianchi@ex.com"
        username: "pippobianchi88"
        skills:
          - "skill 1"
        status: "inactive"
    user:
      summary: Esempio utente
      value:
        name: "mario verdi"
        email: "mario.verdi@ex.com"
    mission:
      summary: Esempio missione
      value:
        team:
          - op1:
              ID: 56
              name: "sara"
              email: "sara@ex.com"
              username: "sara76"
              licenses:
                - "B"
              skills:
                - "skill 1"
              status: "not_free"
          - op2:
              ID: 338
              name: "mirko valenti"
              email: "mirko.valenti@ex.com"
              username: "mirkovalenti99"
              licenses:
                - "A1"
                - "B"
              skills:
                - "skill 1"
                - "skill 2"
              status: "not_free"
        teamLeader:
          ID: 56
          name: "sara"
          email: "sara@ex.com"
          username: "sara76"
          licenses:
            - "B"
          skills:
            - "skill 1"
          status: "not_free"
        objective: "Salvare il micetto dall'albero"
        startTime: "2025-05-21 19:15:00"
        endTime: null
        successLevel: null
        endingAdmin: null
    helpRequest:
      summary: Esempio richiesta di soccorso
      value:
        ID: 3
        description: "Casa rapinata"
        position:
          address: "Via Vetoio 1"
          coordinates: "787N 667E"
        status: "in_corso"
        mission:
          team:
          - op1:
              ID: 56
              name: "sara"
              email: "sara@ex.com"
              username: "sara76"
              licenses:
                - "B"
              skills:
                - "skill 1"
              status: "not_free"
          - op2:
              ID: 338
              name: "mirko valenti"
              email: "mirko.valenti@ex.com"
              username: "mirkovalenti99"
              licenses:
                - "A1"
                - "B"
              skills:
                - "skill 1"
                - "skill 2"
              status: "not_free"
        teamLeader:
          ID: 56
          name: "sara"
          email: "sara@ex.com"
          username: "sara76"
          licenses:
            - "B"
          skills:
            - "skill 1"
          status: "not_free"
        objective: "Salvare il micetto dall'albero"
        startTime: "2025-05-21 19:15:00"
        endTime: "2025-07-11 17:16:00"
        successLevel: 4
        endingAdmin:
          ID: 33
          name: "pippo"
          email: "pippo@exadmin.com"
          username: "pippo69"
          skills: null
          status: "active"
    helpRequestArray:
      summary: Esempio lista richiesta di soccorso
      value:
        - ID: 3
          description: "Casa rapinata"
          position:
            address: "Via Vetoio 1"
            coordinates: "787N 667E"
          status: "in_corso"
          mission:
            team:
            - op1:
                ID: 56
                name: "sara"
                email: "sara@ex.com"
                username: "sara76"
                licenses:
                  - "B"
                skills:
                  - "skill 1"
                status: "not_free"
            - op2:
                ID: 338
                name: "mirko valenti"
                email: "mirko.valenti@ex.com"
                username: "mirkovalenti99"
                licenses:
                  - "A1"
                  - "B"
                skills:
                  - "skill 1"
                  - "skill 2"
                status: "not_free"
          teamLeader:
            ID: 56
            name: "sara"
            email: "sara@ex.com"
            username: "sara76"
            licenses:
              - "B"
            skills:
              - "skill 1"
            status: "not_free"
          objective: "Salvare il micetto dall'albero"
          startTime: "2025-05-21 19:15:00"
          endTime: "2025-07-11 17:16:00"
          successLevel: 4
          endingAdmin:
            ID: 33
            name: "pippo"
            email: "pippo@exadmin.com"
            username: "pippo69"
            skills: null
            status: "active"
        - ID: 3
          description: "Casa rapinata"
          position:
            address: "Via Vetoio 1"
            coordinates: "787N 667E"
          status: "in_corso"
          mission:
            team:
            - op1:
                ID: 56
                name: "sara"
                email: "sara@ex.com"
                username: "sara76"
                licenses:
                  - "B"
                skills:
                  - "skill 1"
                status: "not_free"
            - op2:
                ID: 338
                name: "mirko valenti"
                email: "mirko.valenti@ex.com"
                username: "mirkovalenti99"
                licenses:
                  - "A1"
                  - "B"
                skills:
                  - "skill 1"
                  - "skill 2"
                status: "not_free"
          teamLeader:
            ID: 56
            name: "sara"
            email: "sara@ex.com"
            username: "sara76"
            licenses:
              - "B"
            skills:
              - "skill 1"
            status: "not_free"
          objective: "Salvare il micetto dall'albero"
          startTime: "2025-05-21 19:15:00"
          endTime: "2025-07-11 17:16:00"
          successLevel: 4
          endingAdmin:
            ID: 33
            name: "pippo"
            email: "pippo@exadmin.com"
            username: "pippo69"
            skills: null
            status: "active"
    operatorsArray:
      summary: Esempio di lista di operatori
      value:
        - ID: 55445
          name: "Giuseppe Della Penna"
          email: "giuseppe.della.penna@ex.com"
          username: "peppedipenna77"
          licenses:
            - "A"
            - "B"
          skills:
            - "skill 1"
        - ID: 445
          name: "Giuseppe Della Penna"
          email: "giuseppe.della.penna@ex.com"
          username: "peppedipenna77"
          licenses:
            - "A"
            - "B"
          skills:
            - "skill 1"